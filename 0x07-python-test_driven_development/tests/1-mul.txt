The 1-mul Module:
    >>> mul = __import__("1-mul").mul

Make Sure Documentation Exists:

    >>> module_documentation = __import__("1-mul").__doc__
    >>> print(len(module_documentation) > 0)
    True

    >>> function_documentation = __import__("1-mul").mul.__doc__
    >>> print(len(function_documentation) > 0)
    True

Correct Usage:

    >>> print(mul(1, 2))
    2

    >>> print(mul(5, -2))
    -10

    >>> print(mul(-5, -2))
    10

    >>> print(mul(5, 2.0))
    10.0

    >>> print(mul(5.0, 2.0))
    10.0

    >>> print(mul(5.000, 2.0))
    10.0

    >>> print(mul(5.0005, 2.0))
    10.001

    >>> print(mul(0, 2))
    0

    >>> print(mul(0, -2))
    0

    >>> print(mul(0, 0.3))
    0.0

    >>> print(mul(5.0, 0))
    0.0

    >>> print(mul(-5.0, 0))
    -0.0

    >>> print(mul(2, True))
    2

    >>> print(mul(2, False))
    0

    >>> print(mul(-2, True))
    -2

    >>> print(mul(-2, False))
    0

    >>> print(mul(2.2, True))
    2.2

    >>> print(mul(2.2, False))
    0.0

    >>> print(mul(-2.2, True))
    -2.2

    >>> print(mul(-2.2, False))
    -0.0

    >>> print(mul(5, "ha"))
    hahahahaha

    >>> print(mul((1, 2), 4))
    (1, 2, 1, 2, 1, 2, 1, 2)

    >>> print(mul([3, 4], 4))
    [3, 4, 3, 4, 3, 4, 3, 4]

    >>> mul(1e10000, 1e10000)
    inf

    >>> mul(float("inf"), float("inf"))
    inf

On Errors:

Generic: 

    >>> print(mul(,0))
    Traceback (most recent call last):
    SyntaxError: invalid syntax
    
    >>> print(mul(,))
    Traceback (most recent call last):
    SyntaxError: invalid syntax

    >>>     print(mul(,0))
    Traceback (most recent call last):
    IndentationError: unexpected indent

    >>> print(mul(foo, 3))
    Traceback (most recent call last):
    NameError: name 'foo' is not defined

    >>> print(mul(1))
    Traceback (most recent call last):
    TypeError: mul() missing 1 required positional argument: 'b'

    >>> print(mul(1, 3, 5))
    Traceback (most recent call last):
    TypeError: mul() takes 2 positional arguments but 3 were given

For NoneTypes:

    >>> print(mul(3, None))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'

    >>> print(mul(True, None))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'bool' and 'NoneType'

    >>> print(mul(None, None))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'

    >>> print(mul("ha", None))
    Traceback (most recent call last):
    TypeError: can't multiply sequence by non-int of type 'NoneType'


    >>> print(mul((1, 2), None))
    Traceback (most recent call last):
    TypeError: can't multiply sequence by non-int of type 'NoneType'

    >>> print(mul([1, 2], None))
    Traceback (most recent call last):
    TypeError: can't multiply sequence by non-int of type 'NoneType'

For "TypeError: can't multiply sequence by non-int of type" Tracebacks:

    >>> print(mul("ooh", "lala"))
    Traceback (most recent call last):
    TypeError: can't multiply sequence by non-int of type 'str'

    >>> print(mul((1, 2), (3, 4)))
    Traceback (most recent call last):
    TypeError: can't multiply sequence by non-int of type 'tuple'

    >>> print(mul(4.3, (2, 4)))
    Traceback (most recent call last):
    TypeError: can't multiply sequence by non-int of type 'float'

    >>> print(mul({1,2,3}, (2, 4)))
    Traceback (most recent call last):
    TypeError: can't multiply sequence by non-int of type 'set'

    >>> print(mul({1:"Hello", 'Water': "Bottle" , "Fizz" : 3}, (2, 4)))
    Traceback (most recent call last):
    TypeError: can't multiply sequence by non-int of type 'dict'

For "TypeError: unsupported operand type(s) for *:" Tracebacks:

Sets:

    >>> print(mul({1,3,4}, 2))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'set' and 'int'

    >>> print(mul({1,2,3}, 3.4))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'set' and 'float'

    >>> print(mul({1,3,4}, True))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'set' and 'bool'

    >>> print(mul({1,2,3}, None))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'set' and 'NoneType'

    >>> print(mul({1,2,3}, {4, 5, 6}))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'set' and 'set'

Dicts:

    >>> print(mul({1:"hello", 3:"Fizz", "list":[1,2,3]}, 2))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'dict' and 'int'

    >>> print(mul({1:"hello", 3:"Fizz", "list":[1,2,3]}, 2.3))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'dict' and 'float'

    >>> print(mul({1:"hello", 3:"Fizz", "list":[1,2,3]}, True))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'dict' and 'bool'

    >>> print(mul({1:"hello", 3:"Fizz", "list":[1,2,3]}, None))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'dict' and 'NoneType'

    >>> print(mul({1:"hello", 3:"Fizz", "list":[1,2,3]}, {1:"hello", 2:"goodbye"}))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'dict' and 'dict'

    >>> print(mul({1:"hello",2:"goodbye", "Fizz":3}, {4, 5, 6}))
    Traceback (most recent call last):
    TypeError: unsupported operand type(s) for *: 'dict' and 'set'

